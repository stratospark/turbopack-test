export default [
  {
    "statements": [
      "CREATE TABLE \"decks\" (\n  \"id\" TEXT NOT NULL,\n  \"name\" TEXT NOT NULL,\n  \"description\" TEXT,\n  \"created_at\" TEXT NOT NULL,\n  \"updated_at\" TEXT NOT NULL,\n  CONSTRAINT \"decks_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"cards\" (\n  \"id\" TEXT NOT NULL,\n  \"card_prompt_id\" TEXT NOT NULL,\n  \"front_text\" TEXT NOT NULL,\n  \"back_text\" TEXT,\n  \"created_at\" TEXT NOT NULL,\n  \"updated_at\" TEXT NOT NULL,\n  CONSTRAINT \"cards_card_prompt_id_card_prompts_id_fk\" FOREIGN KEY (\"card_prompt_id\") REFERENCES \"card_prompts\" (\"id\") ON DELETE CASCADE,\n  CONSTRAINT \"cards_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"card_prompts\" (\n  \"id\" TEXT NOT NULL,\n  \"text\" TEXT NOT NULL,\n  \"state\" TEXT NOT NULL,\n  \"deck_id\" TEXT NOT NULL,\n  \"created_at\" TEXT NOT NULL,\n  \"updated_at\" TEXT NOT NULL,\n  CONSTRAINT \"card_prompts_deck_id_decks_id_fk\" FOREIGN KEY (\"deck_id\") REFERENCES \"decks\" (\"id\") ON DELETE CASCADE,\n  CONSTRAINT \"card_prompts_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"multimedia_prompts\" (\n  \"id\" TEXT NOT NULL,\n  \"text\" TEXT NOT NULL,\n  \"state\" TEXT NOT NULL,\n  \"card_id\" TEXT NOT NULL,\n  \"created_at\" TEXT NOT NULL,\n  \"updated_at\" TEXT NOT NULL,\n  CONSTRAINT \"multimedia_prompts_card_id_cards_id_fk\" FOREIGN KEY (\"card_id\") REFERENCES \"cards\" (\"id\") ON DELETE CASCADE,\n  CONSTRAINT \"multimedia_prompts_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "CREATE TABLE \"multimedia\" (\n  \"id\" TEXT NOT NULL,\n  \"multimedia_prompt_id\" TEXT NOT NULL,\n  \"media_type\" TEXT NOT NULL,\n  \"url\" TEXT,\n  \"metadata\" TEXT_JSON,\n  \"created_at\" TEXT NOT NULL,\n  \"updated_at\" TEXT NOT NULL,\n  CONSTRAINT \"multimedia_multimedia_prompt_id_multimedia_prompts_id_fk\" FOREIGN KEY (\"multimedia_prompt_id\") REFERENCES \"multimedia_prompts\" (\"id\") ON DELETE CASCADE,\n  CONSTRAINT \"multimedia_pkey\" PRIMARY KEY (\"id\")\n) WITHOUT ROWID;\n",
      "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.decks', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_decks_primarykey;",
      "CREATE TRIGGER update_ensure_main_decks_primarykey\n  BEFORE UPDATE ON \"main\".\"decks\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_decks_into_oplog;",
      "CREATE TRIGGER insert_main_decks_into_oplog\n   AFTER INSERT ON \"main\".\"decks\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.decks')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'decks', 'INSERT', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'description', new.\"description\", 'id', new.\"id\", 'name', new.\"name\", 'updated_at', new.\"updated_at\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_decks_into_oplog;",
      "CREATE TRIGGER update_main_decks_into_oplog\n   AFTER UPDATE ON \"main\".\"decks\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.decks')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'decks', 'UPDATE', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'description', new.\"description\", 'id', new.\"id\", 'name', new.\"name\", 'updated_at', new.\"updated_at\"), json_object('created_at', old.\"created_at\", 'description', old.\"description\", 'id', old.\"id\", 'name', old.\"name\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_decks_into_oplog;",
      "CREATE TRIGGER delete_main_decks_into_oplog\n   AFTER DELETE ON \"main\".\"decks\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.decks')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'decks', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('created_at', old.\"created_at\", 'description', old.\"description\", 'id', old.\"id\", 'name', old.\"name\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.cards', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_cards_primarykey;",
      "CREATE TRIGGER update_ensure_main_cards_primarykey\n  BEFORE UPDATE ON \"main\".\"cards\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_cards_into_oplog;",
      "CREATE TRIGGER insert_main_cards_into_oplog\n   AFTER INSERT ON \"main\".\"cards\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.cards')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'cards', 'INSERT', json_object('id', new.\"id\"), json_object('back_text', new.\"back_text\", 'card_prompt_id', new.\"card_prompt_id\", 'created_at', new.\"created_at\", 'front_text', new.\"front_text\", 'id', new.\"id\", 'updated_at', new.\"updated_at\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_cards_into_oplog;",
      "CREATE TRIGGER update_main_cards_into_oplog\n   AFTER UPDATE ON \"main\".\"cards\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.cards')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'cards', 'UPDATE', json_object('id', new.\"id\"), json_object('back_text', new.\"back_text\", 'card_prompt_id', new.\"card_prompt_id\", 'created_at', new.\"created_at\", 'front_text', new.\"front_text\", 'id', new.\"id\", 'updated_at', new.\"updated_at\"), json_object('back_text', old.\"back_text\", 'card_prompt_id', old.\"card_prompt_id\", 'created_at', old.\"created_at\", 'front_text', old.\"front_text\", 'id', old.\"id\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_cards_into_oplog;",
      "CREATE TRIGGER delete_main_cards_into_oplog\n   AFTER DELETE ON \"main\".\"cards\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.cards')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'cards', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('back_text', old.\"back_text\", 'card_prompt_id', old.\"card_prompt_id\", 'created_at', old.\"created_at\", 'front_text', old.\"front_text\", 'id', old.\"id\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_cards_card_prompt_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_cards_card_prompt_id_into_oplog\n  AFTER INSERT ON \"main\".\"cards\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.card_prompts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'card_prompts', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"card_prompts\" WHERE \"id\" = new.\"card_prompt_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_cards_card_prompt_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_cards_card_prompt_id_into_oplog\n   AFTER UPDATE ON \"main\".\"cards\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.card_prompts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'card_prompts', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"card_prompts\" WHERE \"id\" = new.\"card_prompt_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.card_prompts', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_card_prompts_primarykey;",
      "CREATE TRIGGER update_ensure_main_card_prompts_primarykey\n  BEFORE UPDATE ON \"main\".\"card_prompts\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_card_prompts_into_oplog;",
      "CREATE TRIGGER insert_main_card_prompts_into_oplog\n   AFTER INSERT ON \"main\".\"card_prompts\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.card_prompts')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'card_prompts', 'INSERT', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'deck_id', new.\"deck_id\", 'id', new.\"id\", 'state', new.\"state\", 'text', new.\"text\", 'updated_at', new.\"updated_at\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_card_prompts_into_oplog;",
      "CREATE TRIGGER update_main_card_prompts_into_oplog\n   AFTER UPDATE ON \"main\".\"card_prompts\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.card_prompts')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'card_prompts', 'UPDATE', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'deck_id', new.\"deck_id\", 'id', new.\"id\", 'state', new.\"state\", 'text', new.\"text\", 'updated_at', new.\"updated_at\"), json_object('created_at', old.\"created_at\", 'deck_id', old.\"deck_id\", 'id', old.\"id\", 'state', old.\"state\", 'text', old.\"text\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_card_prompts_into_oplog;",
      "CREATE TRIGGER delete_main_card_prompts_into_oplog\n   AFTER DELETE ON \"main\".\"card_prompts\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.card_prompts')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'card_prompts', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('created_at', old.\"created_at\", 'deck_id', old.\"deck_id\", 'id', old.\"id\", 'state', old.\"state\", 'text', old.\"text\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_card_prompts_deck_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_card_prompts_deck_id_into_oplog\n  AFTER INSERT ON \"main\".\"card_prompts\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.decks') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'decks', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"decks\" WHERE \"id\" = new.\"deck_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_card_prompts_deck_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_card_prompts_deck_id_into_oplog\n   AFTER UPDATE ON \"main\".\"card_prompts\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.decks') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'decks', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"decks\" WHERE \"id\" = new.\"deck_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.multimedia_prompts', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_multimedia_prompts_primarykey;",
      "CREATE TRIGGER update_ensure_main_multimedia_prompts_primarykey\n  BEFORE UPDATE ON \"main\".\"multimedia_prompts\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_multimedia_prompts_into_oplog;",
      "CREATE TRIGGER insert_main_multimedia_prompts_into_oplog\n   AFTER INSERT ON \"main\".\"multimedia_prompts\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.multimedia_prompts')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'multimedia_prompts', 'INSERT', json_object('id', new.\"id\"), json_object('card_id', new.\"card_id\", 'created_at', new.\"created_at\", 'id', new.\"id\", 'state', new.\"state\", 'text', new.\"text\", 'updated_at', new.\"updated_at\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_multimedia_prompts_into_oplog;",
      "CREATE TRIGGER update_main_multimedia_prompts_into_oplog\n   AFTER UPDATE ON \"main\".\"multimedia_prompts\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.multimedia_prompts')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'multimedia_prompts', 'UPDATE', json_object('id', new.\"id\"), json_object('card_id', new.\"card_id\", 'created_at', new.\"created_at\", 'id', new.\"id\", 'state', new.\"state\", 'text', new.\"text\", 'updated_at', new.\"updated_at\"), json_object('card_id', old.\"card_id\", 'created_at', old.\"created_at\", 'id', old.\"id\", 'state', old.\"state\", 'text', old.\"text\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_multimedia_prompts_into_oplog;",
      "CREATE TRIGGER delete_main_multimedia_prompts_into_oplog\n   AFTER DELETE ON \"main\".\"multimedia_prompts\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.multimedia_prompts')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'multimedia_prompts', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('card_id', old.\"card_id\", 'created_at', old.\"created_at\", 'id', old.\"id\", 'state', old.\"state\", 'text', old.\"text\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_multimedia_prompts_card_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_multimedia_prompts_card_id_into_oplog\n  AFTER INSERT ON \"main\".\"multimedia_prompts\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.cards') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'cards', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"cards\" WHERE \"id\" = new.\"card_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_multimedia_prompts_card_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_multimedia_prompts_card_id_into_oplog\n   AFTER UPDATE ON \"main\".\"multimedia_prompts\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.cards') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'cards', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"cards\" WHERE \"id\" = new.\"card_id\";\nEND;",
      "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.multimedia', 1);",
      "DROP TRIGGER IF EXISTS update_ensure_main_multimedia_primarykey;",
      "CREATE TRIGGER update_ensure_main_multimedia_primarykey\n  BEFORE UPDATE ON \"main\".\"multimedia\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"id\" != new.\"id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column id as it belongs to the primary key')\n    END;\nEND;",
      "DROP TRIGGER IF EXISTS insert_main_multimedia_into_oplog;",
      "CREATE TRIGGER insert_main_multimedia_into_oplog\n   AFTER INSERT ON \"main\".\"multimedia\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.multimedia')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'multimedia', 'INSERT', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'id', new.\"id\", 'media_type', new.\"media_type\", 'metadata', new.\"metadata\", 'multimedia_prompt_id', new.\"multimedia_prompt_id\", 'updated_at', new.\"updated_at\", 'url', new.\"url\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_multimedia_into_oplog;",
      "CREATE TRIGGER update_main_multimedia_into_oplog\n   AFTER UPDATE ON \"main\".\"multimedia\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.multimedia')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'multimedia', 'UPDATE', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'id', new.\"id\", 'media_type', new.\"media_type\", 'metadata', new.\"metadata\", 'multimedia_prompt_id', new.\"multimedia_prompt_id\", 'updated_at', new.\"updated_at\", 'url', new.\"url\"), json_object('created_at', old.\"created_at\", 'id', old.\"id\", 'media_type', old.\"media_type\", 'metadata', old.\"metadata\", 'multimedia_prompt_id', old.\"multimedia_prompt_id\", 'updated_at', old.\"updated_at\", 'url', old.\"url\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_multimedia_into_oplog;",
      "CREATE TRIGGER delete_main_multimedia_into_oplog\n   AFTER DELETE ON \"main\".\"multimedia\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.multimedia')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'multimedia', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('created_at', old.\"created_at\", 'id', old.\"id\", 'media_type', old.\"media_type\", 'metadata', old.\"metadata\", 'multimedia_prompt_id', old.\"multimedia_prompt_id\", 'updated_at', old.\"updated_at\", 'url', old.\"url\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS compensation_insert_main_multimedia_multimedia_prompt_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_multimedia_multimedia_prompt_id_into_oplog\n  AFTER INSERT ON \"main\".\"multimedia\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.multimedia_prompts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'multimedia_prompts', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"multimedia_prompts\" WHERE \"id\" = new.\"multimedia_prompt_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_multimedia_multimedia_prompt_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_multimedia_multimedia_prompt_id_into_oplog\n   AFTER UPDATE ON \"main\".\"multimedia\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.multimedia_prompts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'multimedia_prompts', 'COMPENSATION', json_object('id', \"id\"), json_object('id', \"id\"), NULL, NULL\n  FROM \"main\".\"multimedia_prompts\" WHERE \"id\" = new.\"multimedia_prompt_id\";\nEND;"
    ],
    "version": "20240419014351_444"
  }
]